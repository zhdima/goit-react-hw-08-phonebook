{"version":3,"file":"static/js/754.d5530994.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Button } from '../GlobalStyle'\n\nexport const DelButton = styled(Button)`\n  margin-left: 8px;\n  padding: 2px 8px;\n  font-size: 12px;\n`;\n","import PropTypes from 'prop-types';\nimport { BsFillPersonFill } from 'react-icons/bs';\nimport { DelButton } from './ContactItem.styled';\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <BsFillPersonFill size=\"16\" />\n      <span>{name}:</span>\n      <span>{number}</span>\n      <DelButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</DelButton>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  padding: 4px 0;\n`;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectNameFilter = state => state.filters.name;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectNameFilter],\n  (contacts, nameFilter) => {\n    if (!nameFilter) {\n      return contacts;\n    }\n    const normNameFilter = nameFilter.toLowerCase();\n    return contacts.filter(({ name }) => name.toLowerCase().includes(normNameFilter));\n  }\n);\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport { ListItem } from './ContactList.styled';\nimport { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"../../redux/contacts/selectors\";\n\nexport const ContactList = () => {\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {visibleContacts.map(contact => (\n        <ListItem key={contact.id}>\n          <ContactItem contact={contact} />\n        </ListItem>\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\nimport { Button } from '../GlobalStyle'\n\nexport const Form = styled(FormikForm)`\n  width: 320px;\n  margin: 16px 0;\n  padding: 16px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  color: red;\n`;\n\nexport const AddButton = styled(Button)`\n  padding: 4px 8px;\n  width: 40%;\n`;\n","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, FormField, ErrorMessage, AddButton } from './ContactForm.styled';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/operations\";\nimport { selectContacts } from \"../../redux/contacts/selectors\";\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'the name is too short')\n    .max(100, 'the name is too long')\n    .required('the name is required'),\n  number: Yup.string()\n    .min(3, 'the number is too short')\n    .max(50, 'the number is too long')\n    .required('the number is required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, actions) => {\n    \n    const normName = values.name.toLowerCase();\n    if (contacts.find(({ name }) => name.toLowerCase() === normName)) {\n      alert(`${values.name} is already in contacts!`);\n      return;\n    }\n  \n    dispatch(addContact(values));\n    actions.resetForm();\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={onSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <FormField>\n          Name\n          <Field name=\"name\" type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field name=\"number\" type=\"tel\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormField>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  margin: 12px 0;\n`;","import { FilterWrap } from './Filter.styled';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectNameFilter } from \"../../redux/contacts/selectors\";\nimport { setNameFilter } from \"../../redux/contacts/filtersSlice\";\n\nexport const Filter = () => {\n  const nameFilter = useSelector(selectNameFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = evt => dispatch(setNameFilter(evt.currentTarget.value)); \n\n  return (\n    <FilterWrap>\n      <label>\n        <p>Find contacts by name</p>\n        <input type=\"text\" value={nameFilter} onChange={onFilterChange} />\n      </label>\n    </FilterWrap>\n  );\n};\n","import { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { Loader } from '../components/Loader/Loader';\nimport { ErrorInfo } from '../components/GlobalStyle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading ? <Loader />\n        : error ? <ErrorInfo>{error}</ErrorInfo> \n          : <ContactList />\n        }\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["DelButton","styled","Button","ContactItem","contact","id","name","number","dispatch","useDispatch","size","type","onClick","deleteContact","ListItem","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectNameFilter","filters","selectVisibleContacts","createSelector","nameFilter","normNameFilter","toLowerCase","filter","includes","ContactList","visibleContacts","useSelector","map","Form","FormikForm","FormField","ErrorMessage","FormikErrorMessage","AddButton","ContactSchema","Yup","shape","min","max","required","ContactForm","initialValues","validationSchema","onSubmit","values","actions","normName","find","alert","addContact","resetForm","autoComplete","pattern","title","component","FilterWrap","Filter","value","onChange","evt","setNameFilter","currentTarget","useEffect","fetchContacts","Loader"],"sourceRoot":""}